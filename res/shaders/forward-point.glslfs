#version 330 core

in vec4 vertexColor0;
in vec3 vertexNormal0;
in vec3 worldPos0;

struct PointLight
{
	vec3 lightColor;
	vec3 position;
	float range;
	float intensity;
	float atten_constant;
	float atten_linear;
	float atten_exponent;
};

uniform PointLight pointLight;
uniform vec3 eyePos;

uniform float specularIntensity;
uniform float specularPower;

out vec4 fragColor;

vec4 calcLight(vec3 color, float intensity, vec3 direction, vec3 normal)
{
    float diffuseFactor = dot(normal, -direction);
    
	float specularFactor;
    
    if(diffuseFactor > 0)
    {
        vec3 directionToEye = normalize(eyePos - worldPos0);
        vec3 reflectDirection = normalize(reflect(direction, normal));
        
        float specularFactor = dot(directionToEye, reflectDirection);
        specularFactor = pow(specularFactor, specularPower);
    }
    
    return vec4(color, 1) * (max(0,diffuseFactor)*intensity + 
			max(0,specularFactor)*specularIntensity);
}

vec4 calcPointLight(PointLight pointLight, vec3 normal)
{
	vec3 lightDirection = worldPos0 - pointLight.position;
	float distanceToPoint = length(lightDirection);
	
	if(distanceToPoint > pointLight.range)
		return vec4(0,0,0,0);
	
	lightDirection = normalize(lightDirection);
	
	vec4 color = calcLight(pointLight.lightColor, pointLight.intensity, lightDirection, normal);
	
	float attenuation = pointLight.atten_constant+
					pointLight.atten_linear*distanceToPoint+
					pointLight.atten_exponent*distanceToPoint*distanceToPoint+
					0.0001;
	
	return color / attenuation;
}

void main()
{
    fragColor = vertexColor0 * calcPointLight(pointLight, normalize(vertexNormal0));
}

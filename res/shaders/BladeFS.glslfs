#version 330 core

in vec4 vertexColor0;
in vec3 worldPos0;
in vec3 modelPos0;

in vec3 vertexNormal0;

uniform sampler1D heatMap;

uniform vec3 eyePos;

const float ambientLight = 0.2;
const float diffuseFactor = 0.2;
const float specularFactor = 1.2;
const float specularPower = 2;
const vec3 lightDirection = normalize(vec3(0.3, -0.5, -1));

out vec4 fragColor;

void main(){
	
	vec3 normal = normalize(vertexNormal0);
	
	vec4 mapData = texture(heatMap, modelPos0.x);
	vec3 col = vertexColor0.xyz;
	col += vec3(mapData.x*10, mapData.y*10, 0);
	if(col.x>1)
		col /= col.x;
	if(col.y>1)
		col /= col.y;
	if(col.z>1)
		col /= col.z;
	
	float diffuseLight = max(0, dot(normalize(normal), -lightDirection) * diffuseFactor);
	float specularLight = max(0, dot(normalize(eyePos-worldPos0), reflect(lightDirection, normalize(normal))));
	specularLight += mapData.y;
	specularLight = pow(specularLight, specularPower) * specularFactor;
	
    fragColor = vec4(col * (diffuseLight+specularLight+ambientLight), vertexColor0.w);
}

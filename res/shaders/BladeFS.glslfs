#version 330 core

in vec4 vertexColor0;
in vec3 worldPos0;
in vec3 modelPos0;

in vec3 vertexNormal0;

uniform mat4 modelspaceMatrix;

uniform sampler1D heatMap;

uniform vec3 eyePos;

const float ambientLight = 0.3;
const float diffuseFactor = 0.3;
const float specularFactor = 0.8;
const float specularPower = 4;

const vec3 lightDirection = normalize(vec3(0.3, 0.5, -1));
uniform vec3 pointLightPos = vec3(0.5f, -0.5f, 1);

out vec4 fragColor;

float calcLight(vec3 dir, vec3 normal, vec3 eyeDir)
{
	float DirDiffuseLight = max(0, dot(normalize(normal), -dir) * diffuseFactor);
	float DirSpecularLight = max(0, dot(eyeDir, reflect(dir, normalize(normal))));
	DirSpecularLight = pow(DirSpecularLight, specularPower) * specularFactor;
	
	return DirDiffuseLight + DirSpecularLight;
}

void main(){
	vec4 mapData = texture(heatMap, modelPos0.x);
	vec3 col = vertexColor0.xyz;
	col += vec3(mapData.x*10, mapData.y*10, 0);
	if(col.x>1)
		col /= col.x;
	if(col.y>1)
		col /= col.y;
	if(col.z>1)
		col /= col.z;
	
	vec3 normal = normalize(vertexNormal0);
	vec3 eyeDir = normalize(eyePos-worldPos0);
	
	float light = ambientLight;
	light += calcLight(lightDirection, normal, eyeDir);
	light += calcLight(normalize(modelPos0-pointLightPos), normal, eyeDir);
	light+=mapData.y*specularFactor;
    fragColor = vec4(col * light, vertexColor0.w);
}
